<h2>Basic Grid Test</h2>
{{#link-to 'editable'}}
  Test Editable Grid
{{/link-to}}

<div>Total Rows: {{model.dataRows.length}}</div>

<h3>Simple Table</h3>
<p>This Fixtable loads and renders all of its content without any pagination or filtering.</p>
<div class="row">
  <div class="col-md-8">
    {{fixtable-grid columns=model.columnDefs content=model.dataRows sortBy=(mut noPageSortKey)
      fixtableClass='restrict-height' tableClass='table-hover'}}
  </div>
</div>

<h3>Client Paging and Filtering</h3>
<p>This Fixtable loads all of its content at once but paginates it on the client.</p>
<p>We don't need to show the loading indicator while changing pages, since the update should be immediate.</p>
<p>The rows can be filtered by column, and the filtering is handled entirely by the Fixtable on the client. The filters are applied 500ms after the user stops typing into a filter field.</p>
<div class="row">
  <div class="col-md-8">
    {{fixtable-grid columns=model.clientColumnDefs content=model.dataRows sortBy=(mut clientPageSortKey)
      fixtableClass='restrict-height' tableClass='table-hover' clientPaging=true}}
  </div>
</div>

<h3>Server Paging and Filtering</h3>
<p>This Fixtable only loads a page at the time and relies on its owning component or controller to provide more data. (This example is actually still implemented on the client, but it simulates server pagination.)</p>
<p>Because loading data from the server is asynchronous, we show the loading indicator while we wait to let the user know that something is happening.</p>
<p>The rows can be filtered by column, but the filtering must be implemented by the consuming component or controller, since the Fixtable does not have enough information to perform filtering on the client. The filters are applied 500ms after the user stops typing into a filter field.</p>
<div class="row">
  <div class="col-md-8">
    {{fixtable-grid columns=model.filteredColumnDefs content=model.pagedDataRows sortBy=(mut serverPageSortKey)
      fixtableClass='restrict-height' tableClass='table-hover'
      isLoading=serverPageIsLoading serverPaging=true totalRowsOnServer=model.filteredDataRows.length
      onReloadContent=(action 'updateServerPage') }}
  </div>
</div>

<h3>Server Paging with Manual Filter Application and Placeholder Text</h3>
<p>Like the previous example, this Fixtable has server pagination and filtering enabled. Unlike the previous example, the filters are not applied until the user presses a button.</p>
<p>The filter fields for this table also have placeholder text defined in the column definitions.</p>
<div class="row">
  <div class="col-md-8">
    {{fixtable-grid columns=model.filteredColumnWithPlaceholderDefs content=model.manualFilterVisibleRows sortBy=(mut manualFilterPageSortKey)
      fixtableClass='restrict-height' tableClass='table-hover' realtimeFiltering=false
      isLoading=manualFilterPageIsLoading serverPaging=true totalRowsOnServer=model.manualFilterDataRows.length
      onReloadContent=(action 'updateManualFilterPage') }}
  </div>
</div>

<h3>Custom Filter Components</h3>
<p>This Fixtable demonstrates the use of a custom filter component. In this case, the custom filter is rendered as a checkbox.</p>
<div class="row">
  <div class="col-md-8">
    {{fixtable-grid columns=model.filteredColumnWithCustomDefs content=model.dataRows sortBy=(mut customFilterSortKey)
      fixtableClass='restrict-height' tableClass='table-hover' clientPaging=true}}
  </div>
</div>

<h3>Row Selection</h3>
<p>This Fixtable lets you select rows.</p>
<h4>Selected:</h4>
{{#if selectedNames.length}}
  <p>{{selectedNames}}</p>
{{else}}
  <p>(none)</p>
{{/if}}
<div class="row">
  <div class="col-md-8">
    {{fixtable-grid columns=model.filteredColumnDefs content=model.dataRows sortBy=(mut rowSelectionSortKey)
      fixtableClass='restrict-height' tableClass='table-hover' clientPaging=true rowSelection=true
      onSelectionChanged=(action 'updateSelection')}}
  </div>
</div>
